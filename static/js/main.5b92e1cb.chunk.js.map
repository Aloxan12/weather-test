{"version":3,"sources":["reportWebVitals.ts","UI/NavPage.tsx","DAL/api.ts","BLL/mainReducer.tsx","UI/CityList.tsx","UI/NotFound.tsx","routes.tsx","App.tsx","BLL/store.ts","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","NavPage","useState","cityTitle","setCityTitle","editMode","setEditMode","className","to","value","onChange","e","currentTarget","onClick","getWeather","axios","get","res","initialState","loading","temp","tomorrow","tempAfterTomorrow","dt","setWeather","type","setWeatherAfterTomorrow","isLoading","CityList","title","useParams","useSelector","state","main","dispatch","useDispatch","celsiusTemp","Math","floor","useEffect","a","data","list","map","obj","today","Date","getDay","afterTomorrow","dates","console","log","tomorrowDt","getTime","afterTomorrowDt","toLocaleDateString","routes","id","path","exact","component","Routes","route","props","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5b92e1cb.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport './NavPage.css'\r\n\r\n\r\nexport const NavPage: React.FC<{}> = ()=>{\r\n    const [cityTitle, setCityTitle] = useState('Введите свой город')\r\n    const [editMode, setEditMode] = useState<boolean>(true)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setCityTitle(e.currentTarget.value)\r\n    }\r\n    const offEditMode =()=> setEditMode(false);\r\n    const onEditMode =()=> setEditMode(true);\r\n    return (\r\n        <div className='NavPageContainer'>\r\n            <Link to={'/weather/Минск'} >Минск</Link>\r\n            <Link to={'/weather/Москва'} >Москва</Link>\r\n            <Link to={'/weather/Братислава'} >Братислава</Link>\r\n            <div className='changeCity'>\r\n                {\r\n                    editMode\r\n                        ? <><input value={cityTitle} onChange={onChangeHandler}/>\r\n                            <button onClick={offEditMode}>Изменить ✔</button></>\r\n                        : <><Link to={`/weather/${cityTitle}`}>{cityTitle}</Link>\r\n                            <button onClick={onEditMode}> Редактировать</button> </>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import axios from \"axios\";\r\n\r\nconst API_KEY = 'c862d54702b813ad8241ed73c3ee826f';\r\n\r\nexport const getWeather = (cityTitle: string)=>{\r\n    return axios.get(`https://api.openweathermap.org/data/2.5/forecast?q=${cityTitle}&cnt=16&APPID=${API_KEY}`).then(res=> res)\r\n    //return instance.get('')\r\n}\r\n","import {getWeather} from \"../DAL/api\";\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    temp: 0,\r\n    tomorrow: 0,\r\n    tempAfterTomorrow: 0,\r\n    dt: [],\r\n}\r\n\r\nexport const setWeather =(temp: number)=>({type: 'SET-WEATHER', temp} as const)\r\nexport const setWeatherTomorrow =(temp: number)=>({type: 'SET-WEATHER-TOMORROW', temp} as const)\r\nexport const setWeatherAfterTomorrow =(temp: number)=>({type: 'SET-WEATHER-AFTER-TOMORROW', temp} as const)\r\nexport const isLoading =  (isLoading: boolean) => ({type: \"IS-LOADING\", isLoading} as const)\r\nexport const setDtToday =  (dates: []) => ({type: \"SET-DT\", dates} as const)\r\n\r\ntype ActionsType = ReturnType<typeof setWeather>  | ReturnType<typeof isLoading> | ReturnType<typeof setDtToday> | ReturnType<typeof setWeatherTomorrow>\r\n    | ReturnType<typeof setWeatherAfterTomorrow>\r\n\r\nexport const mainReducer =(state = initialState, action: ActionsType)=>{\r\n    switch (action.type){\r\n        case 'IS-LOADING':{\r\n            return {...state, loading: action.isLoading}\r\n        }\r\n        case 'SET-WEATHER':{\r\n            return {...state, temp: action.temp}\r\n        }\r\n        case 'SET-WEATHER-TOMORROW':{\r\n            return {...state, tomorrow: action.temp}\r\n        }\r\n        case 'SET-WEATHER-AFTER-TOMORROW':{\r\n            return {...state, tempAfterTomorrow: action.temp}\r\n        }\r\n        case \"SET-DT\":{\r\n            return {...state, dt: action.dates}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setWeatherT = (cityTitle: string) => {\r\n    return async (dispatch: any) => {\r\n        try {\r\n            dispatch(isLoading(true))\r\n            let data = await getWeather(cityTitle).then(res => res.data)\r\n            const allDt = data.list.map( async (obj: any) => {\r\n                const today = new Date().getDay()\r\n                const tomorrow = new Date().getDay() + 1\r\n                const afterTomorrow = new Date().getDay() + 2\r\n                const dates = await new Date((obj.dt * 1000));\r\n                if(today === dates.getDay()){\r\n                    dispatch(setWeather(obj.main.temp))\r\n                }\r\n                if(tomorrow === dates.getDay()){\r\n                    dispatch(setWeatherTomorrow(obj.main.temp))\r\n                }\r\n                if(afterTomorrow === dates.getDay()){\r\n                    console.log(obj.main.temp)\r\n                    dispatch(setWeatherAfterTomorrow(obj.main.temp))\r\n                }\r\n                return dates\r\n            })\r\n            dispatch(setWeather(data.main.temp))\r\n            dispatch(isLoading(false))\r\n        }catch (e) {}\r\n    }\r\n}\r\n","import React, {useEffect} from \"react\";\r\nimport './CityList.css';\r\nimport {useParams} from \"react-router\";\r\nimport {NavPage} from \"./NavPage\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setWeatherT} from \"../BLL/mainReducer\";\r\nimport {RootReduxStateType} from \"../BLL/store\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\ntype ParamTypes = {\r\n    title: string\r\n}\r\ntype SelectTempTypes = {\r\n    temp: number\r\n    tomorrow: number\r\n    tempAfterTomorrow: number\r\n}\r\nexport const CityList: React.FC<{}> = () => {\r\n    const {title} = useParams<ParamTypes>()\r\n    const {temp, tomorrow, tempAfterTomorrow } = useSelector<RootReduxStateType, SelectTempTypes>(state => state.main)\r\n    //const tempTomorrow = useSelector<RootReduxStateType, number>(state => state.main.tomorrow)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    useEffect(()=>{\r\n        dispatch(setWeatherT(title))\r\n    },[dispatch, title])\r\n\r\n    function celsiusTemp(temp: number){\r\n        return Math.floor(temp) - 273;\r\n    }\r\n    const today = new Date()\r\n    const tomorrowDt = new Date(today.getTime() + (24 * 60 * 60 * 1000))\r\n    const afterTomorrowDt = new Date(today.getTime() + ((24 * 60 * 60 * 1000) * 2))\r\n    return (\r\n        <div className='CityListContainer'>\r\n            <NavPage />\r\n            <div className='CityListBlock'>\r\n                <h2>Город: {title}</h2>\r\n                <div>Температура сегодня ({today.toLocaleDateString()}): {celsiusTemp(temp)} &#xb0;С</div>\r\n                <div>Температура завтра({tomorrowDt.toLocaleDateString()}): {celsiusTemp(tomorrow)} &#xb0;С</div>\r\n                <div>Температура послезавтра ({afterTomorrowDt.toLocaleDateString()}): {celsiusTemp(tempAfterTomorrow)} &#xb0;С</div>\r\n                <Link to='/'>Подробнее</Link>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport {Redirect} from \"react-router\";\n\nexport const NotFound = () => {\n    return <Redirect to={'/'} />\n}","import {Route, Switch} from 'react-router-dom';\r\nimport React from 'react';\r\nimport {App} from \"./App\";\r\nimport {NavPage} from \"./UI/NavPage\";\r\nimport {CityList} from \"./UI/CityList\";\r\nimport { NotFound } from './UI/NotFound';\r\n\r\nexport const routes = [\r\n    {\r\n        id: 'Main',\r\n        path: '/',\r\n        exact: true,\r\n        component: App\r\n    },\r\n    {\r\n        id: \"Weather\",\r\n        path: '/weather/',\r\n        exact: true,\r\n        component: NavPage\r\n    },\r\n    {\r\n        id: \"City\",\r\n        path: '/weather/:title',\r\n        exact: true,\r\n        component: CityList\r\n    },\r\n    {\r\n        id: \"CityDetails\",\r\n        path: '/weather/:title/details',\r\n        exact: true,\r\n        component: CityList\r\n    },\r\n    {\r\n        id: \"notFound\",\r\n        path: '*',\r\n        component: NotFound\r\n    },\r\n];\r\n\r\nconst Routes = () => {\r\n    return (\r\n        <Switch>\r\n            { routes.map(route => {\r\n                const { id, ...props } = route;\r\n                return (\r\n                    <Route key={id} {...props} />\r\n                )\r\n            })}\r\n        </Switch>\r\n    )\r\n}\r\n\r\nexport default Routes;\r\n","import React from 'react';\nimport './App.css';\nimport {CityList} from \"./UI/CityList\";\n\nexport function App() {\n  return (\n    <div className=\"App\">\n      <CityList />\n    </div>\n  );\n}\n","import {combineReducers, createStore, applyMiddleware} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {mainReducer} from \"./mainReducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    main: mainReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\n\r\nexport type RootReduxStateType = ReturnType<typeof rootReducer>\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from \"react-router-dom\";\nimport Routes from \"./routes\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./BLL/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <Provider store={store}>\n                <Routes />\n            </Provider>\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}